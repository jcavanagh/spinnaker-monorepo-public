plugins {
  id 'io.spinnaker.project' apply false
  alias(libs.plugins.kotlin.jvm) apply false
  alias(libs.plugins.kotlin.allopen) apply false
  id "org.jetbrains.dokka" version "0.10.1" apply false

}

allprojects {
  apply plugin: 'io.spinnaker.project'

  group = "io.spinnaker.gate"

  if (name != "gate-bom" && name != "gate-api") {
    apply plugin: 'java-library'
    apply plugin: 'groovy'

    repositories {
      maven { url 'https://build.shibboleth.net/nexus/content/repositories/releases/' }
      maven { url 'https://repository.mulesoft.org/releases/' }
    }

    dependencies {
      implementation enforcedPlatform("io.spinnaker.kork:kork-bom")
      annotationProcessor platform("io.spinnaker.kork:kork-bom")
      annotationProcessor("org.springframework.boot:spring-boot-configuration-processor")
      testAnnotationProcessor platform("io.spinnaker.kork:kork-bom")
      compileOnly "org.projectlombok:lombok"
      annotationProcessor "org.projectlombok:lombok"
      testAnnotationProcessor "org.projectlombok:lombok"

      implementation "org.apache.groovy:groovy"
      implementation "net.logstash.logback:logstash-logback-encoder"
      implementation "org.jetbrains.kotlin:kotlin-reflect"

      testImplementation "org.spockframework:spock-core"
      testImplementation "org.spockframework:spock-spring"
      testImplementation("org.springframework.boot:spring-boot-starter-test") {
         exclude group: "org.slf4j", module: "slf4j-api"
      }
      testImplementation "org.hamcrest:hamcrest-core"
      testRuntimeOnly "cglib:cglib-nodep"
      testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
      testRuntimeOnly "org.objenesis:objenesis"
    }

    configurations.all {
      exclude group: 'javax.servlet', module: 'servlet-api'
      exclude group: 'javax.servlet', module: 'javax.servlet-api'
    }
  }

  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8184'
    }
  }

  test {
    testLogging {
      exceptionFormat = 'full'
    }
    useJUnitPlatform()
    maxHeapSize = "1g"
  }
}

// This is registered here so that 'gate' is the default working directory for the commands in this script
tasks.register('swagger') {
  doLast {
    exec {
      workingDir project.rootDir
      commandLine('bash', '-c', 'swagger/generate_swagger.sh')
    }
  }
}

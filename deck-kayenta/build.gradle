import java.nio.file.Paths
import groovy.json.JsonOutput
import groovy.json.JsonSlurper

plugins {
  id "io.spinnaker.artifactregistry-publish"
  id "nebula.node" version "1.3.1"
}

group = "com.netflix.spinnaker.deck-kayenta"

node {
    // Pulls node and npm versions from package.json.
    def packageSlurper = new JsonSlurper()
    def packageJson = packageSlurper.parse file('package.json')

    version = packageJson.engines.node.replaceAll(/[^\d\.]/, '')
    npmVersion = packageJson.engines.npm.replaceAll(/[^\d\.]/, '')
    yarnVersion = packageJson.engines.yarn.replaceAll(/[^\d\.]/, '')

    // Enabled the automatic download. False is the default (for now).
    download = true
}

task lint(type: YarnTask) {
  dependsOn "eslintPlugin"

  yarnCommand = ["lint"]
}

task prettier(type: YarnTask) {
  dependsOn "eslintPlugin"
  dependsOn "lint"

  yarnCommand = ["prettier:check"]
}

project.tasks.register('runLinters') {
  dependsOn "lint"
  dependsOn "prettier"
}

task test(type: YarnTask) {
  dependsOn "yarn"

  yarnCommand = ["test"]
  args = ["--single-run", "--reporters", "dots"]

  if (project.hasProperty('skipTests')) {
    karma.enabled = false
  }
}

task webpack(type: YarnTask) {
  dependsOn "yarn"
  dependsOn "modules"
  dependsOn "runLinters"
  dependsOn "test"

  yarnCommand = ["build"]
  environment = [
    "NODE_ENV": "production",
    "GATE_HOST": "spinnaker-api-prestaging.prod.netflix.net",
    "NODE_OPTIONS": "--max_old_space_size=8192",
  ]
}
webpack.outputs.dir file('build/webpack')

task copyFavicon(type: Copy) {
  dependsOn "webpack"

  from "packages/app/icons/prod-favicon.ico"
  into "build/webpack"
  rename "prod-favicon.ico", "favicon.ico"
}

task generateVersionFile {
  doLast {
    'git update-index --assume-unchanged version.json'.execute()
    def buildInfo = [
      version: project.hasProperty('deckVersion') ? "${deckVersion}" : "n/a",
      created: new Date().getTime()
    ]
    def buildJson = JsonOutput.prettyPrint(JsonOutput.toJson(buildInfo))
    mkdir "build/webpack"
    file(Paths.get("build", "webpack", "version.json")).write(buildJson)
    file("version.json").write(buildJson)
  }
}
yarn.dependsOn 'generateVersionFile'

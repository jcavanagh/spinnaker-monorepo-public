name: Version
description: Generates version information for Spinnaker builds
author: jcavanagh

inputs:
  project:
    description: Project to generate build version for
    required: true
  github-token:
    description: Github token
    required: true
  skip-increment:
    description: If true, do not allow any incrementing of the version
    default: 'false'

outputs:
  build-number:
    description: The current sequential build number e.g. 1
    value: ${{ steps.version.outputs.build-number }}
  release-train:
    description: The current cleaned-up release ref, e.g. `main` or `2023.1`
    value: ${{ steps.version.outputs.release-train }}
  release-train-suffixed:
    description: As above, but release refs have the .x suffixed, e.g. 2023.1.x
    value: ${{ steps.version.outputs.release-train-suffixed }}
  version:
    description: The autoincrementing build version hyphenated with release train, e.g. `main-1` or `2023.1-1`
    value: ${{ steps.version.outputs.version }}
  semver:
    description: Version, but always valid semver.  Shims non-release versions with a `0.0.0` prefix.
    value: ${{ steps.version.outputs.semver }}
  is-release:
    description: true if ref is a release branch, false if not
    value: ${{ steps.version.outputs.is-release }}
  tag:
    description: The tag this run will create, e.g. `clouddriver-main.1` or `clouddriver-2023.1.1`
    value: ${{ steps.version.outputs.tag }}
  build-url:
    description: A link back to the Github Action run
    value: ${{ steps.version.outputs.build-url }}

runs:
  using: "composite"
  steps:
    # Create an incrementing version number based on the branch and thing we are building
    # e.g. for any project doing a release on `main`, this would store a magic tag named
    # bn-<project>-main-X, where X is the incrementing build number for that prefix.
    # Publishing libraries all at once is required, as -bom packages will write the global version
    # into all composite dependencies - a partial publish will fail to resolve entirely.
    # Other artifacts (containers, debs) do not need to be published on every cycle, and use their event paths config.
    - name: Generate build version
      uses: ./.github/actions/build-tag-number
      with:
        token: ${{ inputs.github-token }}
        suffix: ${{ format('{0}-{1}', inputs.project, github.ref_name) }}
        # Only push or workflow_dispatch events should increase the build number
        # Workflow re-runs should not increase the build number
        skip-increment: ${{ inputs.skip-increment == 'true' || github.event_name == 'pull_request' || (github.event_name != 'pull_request' && github.run_attempt != '1') }}

    # Output the version and its components for the caller to reference
    - name: Output build version
      id: version
      shell: bash
      run: |
        REF="${{ github.ref_name }}"
        
        if [[ '${{ github.event_name }}' == 'pull_request' ]]; then
          # Default ref names for PRs are <number>/merge which doesn't play nice with things like Docker tags
          REF=pr${{ github.event.number }}
        fi
        
        CLEAN_REF="${REF#release-}"
        echo "release-train-suffixed=$CLEAN_REF" >> "$GITHUB_OUTPUT"
        
        RELEASE_TRAIN="${CLEAN_REF%.x}"
        echo "build-number=$BUILD_NUMBER" >> "$GITHUB_OUTPUT"
        echo "release-train=$RELEASE_TRAIN" >> "$GITHUB_OUTPUT"
        
        VERSION="$RELEASE_TRAIN-$BUILD_NUMBER"
        echo "version=$VERSION" >> "$GITHUB_OUTPUT"
        
        IS_RELEASE="false"
        if [[ "$REF" =~ release-* ]]; then
          IS_RELEASE='true'
        fi
        echo "is-release=$IS_RELEASE" >> "$GITHUB_OUTPUT"
        
        echo "tag=${{ inputs.project }}-$VERSION" >> "$GITHUB_OUTPUT"
        
        # Some things like NPM enforce semver-ish conventions
        if [[ "$IS_RELEASE" == 'true' ]]; then
          SEMVER="$RELEASE_TRAIN.$BUILD_NUMBER"
        else
          SEMVER="0.0.0-$VERSION"
        fi
        echo "semver=$SEMVER" >> "$GITHUB_OUTPUT"
        
        BUILD_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "build-url=$BUILD_URL" >> "$GITHUB_OUTPUT"
        
        if [[ '${{ github.event_name }}' != 'pull_request' ]]; then
          echo "### Version Info" >> "$GITHUB_STEP_SUMMARY"
          echo "| | |" >> "$GITHUB_STEP_SUMMARY"
          echo "| --- | --- |" >> "$GITHUB_STEP_SUMMARY"
          echo "| __Version__ | $VERSION |" >> "$GITHUB_STEP_SUMMARY"
          echo "| __Semver-ish__ | $SEMVER |" >> "$GITHUB_STEP_SUMMARY"
          echo "| __Is Release__ | $IS_RELEASE |" >> "$GITHUB_STEP_SUMMARY"
          echo "| __Build Number__ | $BUILD_NUMBER |" >> "$GITHUB_STEP_SUMMARY"
          echo "| __Release Train__ | $RELEASE_TRAIN ($CLEAN_REF) |" >> "$GITHUB_STEP_SUMMARY"
          echo "| __Build URL__ | $BUILD_URL |" >> "$GITHUB_STEP_SUMMARY"
        fi

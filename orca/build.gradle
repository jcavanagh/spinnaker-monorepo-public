/*
 * Copyright 2014 Netflix, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'io.spinnaker.project' apply false
  alias(libs.plugins.kotlin.jvm) apply false
  alias(libs.plugins.kotlin.allopen) apply false
  id "io.gitlab.arturbosch.detekt" version "1.17.1" apply false
}

allprojects {
  apply plugin: 'io.spinnaker.project'

  group = "io.spinnaker.orca"

  tasks.withType(JavaExec) {
    if (System.getProperty('DEBUG', 'false') == 'true') {
      jvmArgs '-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8183'
    }
  }
}

subprojects {
  if (name != "orca-bom" && name != "orca-api") {
    apply plugin: "java-library"

    dependencies {
      implementation(enforcedPlatform("io.spinnaker.kork:kork-bom"))
      annotationProcessor(platform("io.spinnaker.kork:kork-bom"))
      testAnnotationProcessor(platform("io.spinnaker.kork:kork-bom"))
      implementation("org.slf4j:slf4j-api")
    }

    configurations.all {
      exclude group: "javax.servlet", module: "servlet-api"
    }

    test {
      minHeapSize = "512m"
      maxHeapSize = "2g"
      maxParallelForks = 4

      testLogging {
        exceptionFormat = "full"
      }
      useJUnitPlatform()
    }

    def licenseExtension = project.extensions.findByName('license')
    if (licenseExtension != null) {
      licenseExtension.exclude "**/*.json"
      licenseExtension.exclude "**/*.md"
      licenseExtension.exclude "**/*.yml"
      licenseExtension.mapping {
        java = "SLASHSTAR_STYLE"
        kt = "SLASHSTAR_STYLE"
      }
    }
  }
}
